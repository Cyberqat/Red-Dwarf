<?xml version="1.0" encoding="UTF-8"?>

<project name="sgs" default="build" basedir=".">

  <description>
    Builds Project Darkstar
  </description>

  <!-- First load the user's properties -->
  <property name="user.properties.file"
	    location="${user.home}/.build.properties"/>
  <property file="${user.properties.file}"/>

  <!-- VARIABLE DEFINITIONS -->

  <!-- Build location -->
  <property name="build.dir" location="build"/>
  <property name="lib.dir" location="lib"/>

  <!-- Values for controlling compilation -->
  <property name="javac.source" value="1.5"/>
  <property name="javac.compilerargs"
	    value="-Xlint"/>

  <!-- Where to find Ruby on the current platform -->
  <property name="ruby" location="/usr/bin/ruby"/>

  <!-- Version information -->
  <property name="project.release" value="0.9.4"/>
  <!-- Set to true when building an external release -->
  <property name="external.release" value="false"/>

  <!-- Values for the JavaDocs -->
  <property name="project.name" value="Project Darkstar"/>
  <tstamp>
    <format property="project.build" pattern="MMMM-d-yyyy" locale="en"/>
  </tstamp>

  <property name="javadoc.excludepackages" value="com.sun.sgs.example.hack.*"/>

  <property name="jdk.doc.api.url"
	    value="http://java.sun.com/j2se/1.5/docs/api"/>
  <property name="jdk.package.list" value="etc/jdk5.0_package_list"/>
  <property name="mina.doc.api.url"
            value="http://mina.apache.org/report/1.1/apidocs"/>
  <property name="mina.package.list" value="etc/mina1.1_package_list"/>

  <property name="apidoc.server.zip"
            location="${build.dir}/sgs-server-apidoc.zip"/>
  <property name="apidoc.client.zip"
            location="${build.dir}/sgs-client-apidoc.zip"/>

  <!-- Versions of referenced software, for creating subdirectories in
       the server binary distribution -->
  <property name="bdb.version" value="4.5.20"/>
  <property name="bdb.je.version" value="3.2.44"/>
  <property name="mina.version" value="1.1"/>
  <property name="slf4j.version" value="1.4.0"/>

  <!-- Values for testing -->
  <property name="test.logging" location="test/test.logging"/>
  <property name="test.assertions" value="-ea:com.sun.sgs..."/>
  <property name="test.jvm.args" value="${test.assertions}"/>
  <property name="test.formatter.type" value="plain"/>
  <property name="test.showoutput" value="false"/>
  <property name="test.include" value="**/Test*.java"/>
  <property name="test.use.je" value="true"/>
  <condition property="test.use.je.if.set">
    <istrue value="${test.use.je}"/>
  </condition>
  <condition
     property="test.bdb.env"
     value="com.sun.sgs.impl.service.data.store.db.je.JeEnvironment"
     else="com.sun.sgs.impl.service.data.store.db.bdb.BdbEnvironment">
    <istrue value="${test.use.je}"/>
  </condition>

  <!-- Values for analysis -->
  <property name="analysis.jvm.args"
	    value="-server
		   -XX:+UseParallelGC
		   -XX:+UseFastAccessorMethods
		   -XX:+AggressiveOpts
		   -XX:+MaxFDLimit
		   -XX:NewSize=512m
		   -Xms700m
		   -Xmx2g"/>
  <property name="analysis.tasks"
	    value="com.sun.sgs.analysis.task.ScheduleMapPutsTask"/>
  <!-- Set analysis.use.data.store.server to perform analysis using the
       networked data store -->
  <condition
     property="analysis.data.store.class"
     value="com.sun.sgs.impl.service.data.store.net.DataStoreClient"
     else="com.sun.sgs.impl.service.data.store.DataStoreImpl">
    <istrue value="${analysis.use.data.store.server}"/>
  </condition>
  <property name="analysis.data.store.server.run" value="true"/>
  <property name="analysis.data.store.server.host" value="localhost"/>
  <property name="analysis.data.store.server.port" value="44530"/>

  <!-- Properties for Berkeley DB -->
  <!-- The directory containing the full set of JAR and native library
       files for Berkeley DB, standard edition, for the current
       platform, or an empty value if not being used. -->
  <property name="bdb.lib.dir" value=""/>
  <!-- Whether a non-empty value was supplied for bdb.lib.dir -->
  <condition property="bdb.lib.dir.supplied">
    <length string="${bdb.lib.dir}" length="0" when="greater"/>
  </condition>
  <!-- JAR file for Berkeley DB, Java edition. -->
  <property name="bdb.je.jar.name" value="je-${bdb.je.version}.jar"/>
  <property name="bdb.je.jar" location="lib/${bdb.je.jar.name}"/>
  <!-- Files in the database layer for Berkeley DB, standard edition -->
  <property name="bdb.db.files"
	    value="com/sun/sgs/impl/service/data/store/db/bdb/*.java"/>

  <!-- Shared code class path -->
  <path id="shared.classpath">
    <pathelement location="${build.dir}/classes/shared"/>
    <pathelement location="${lib.dir}/mina-core-1.1.jar"/>
    <pathelement location="${lib.dir}/slf4j-jdk14-1.4.0.jar"/>
    <pathelement location="${lib.dir}/slf4j-api-1.4.0.jar"/>
  </path>

  <!-- Class path entry for Berkeley DB, standard edition -->
  <condition property="bdb.path.entry"
	     value="${bdb.lib.dir}/db.jar"
	     else="">
    <isset property="bdb.lib.dir.supplied"/>
  </condition>

  <!-- Class path for Berkeley DB -->
  <path id="bdb.classpath">
    <pathelement location="${bdb.je.jar}"/>
    <pathelement path="${bdb.path.entry}"/>
  </path>

  <!-- Server class path -->
  <path id="server.classpath">
    <pathelement location="${build.dir}/classes/server"/>
    <path refid="bdb.classpath"/>
    <path refid="shared.classpath"/>
  </path>

  <!-- Client class path -->
  <path id="client.classpath">
    <pathelement location="${build.dir}/classes/client"/>
    <path refid="shared.classpath"/>
  </path>

  <!-- TARGET DEFINITIONS -->

  <!-- Builds everything -->
  <target name="all" depends="build, jar, javadoc, dist, checkstyle, test"
	  description="Builds everything"/>

  <!-- Builds a debug version of the complete project -->
  <target name="build" depends="build-server,build-client"
	  description="Builds code"/>

  <!-- Builds the shared code -->
  <target name="-build-shared">
    <mkdir dir="${build.dir}/classes/shared"/>
    <depend srcdir="j2se"
	    destdir="${build.dir}/classes/shared"
	    cache="${build.dir}/depend"
	    closure="true"/>
    <javac includeAntRuntime="no" debug="on" deprecation="on"
           srcdir="src/shared/j2se" destdir="${build.dir}/classes/shared"
           classpathref="shared.classpath" source="${javac.source}">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Builds the server -->
  <target name="build-server" depends="-build-shared"
      description="Builds server code">
    <mkdir dir="${build.dir}/classes/server"/>
    <depend srcdir="j2se"
	    destdir="${build.dir}/classes/server"
	    cache="${build.dir}/depend"
	    closure="true">
      <exclude name="${bdb.db.files}"/>
    </depend>
    <javac includeAntRuntime="no" debug="on" deprecation="on"
           srcdir="src/server/j2se" destdir="${build.dir}/classes/server"
           classpathref="server.classpath" source="${javac.source}"
	   excludes="${bdb.db.files}">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Builds database layer for Berkeley DB, standard edition -->
  <target
     name="build-bdb-db" depends="build-server"
     description="Builds database layer for Berkeley DB, standard edition">
    <fail unless="bdb.lib.dir.supplied"
	  message="Need to supply a value for bdb.lib.dir property"/>
    <depend srcdir="j2se"
	    destdir="${build.dir}/classes/server"
	    cache="${build.dir}/depend"
	    closure="true"/>
    <javac includeAntRuntime="no" debug="on" deprecation="on"
           srcdir="src/server/j2se" destdir="${build.dir}/classes/server"
           classpathref="server.classpath" source="${javac.source}"
	   includes="${bdb.db.files}">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Builds the client -->
  <target name="build-client" depends="-build-shared"
	  description="Builds client code">
    <mkdir dir="${build.dir}/classes/client"/>
    <depend srcdir="j2se"
	    destdir="${build.dir}/classes/client"
	    cache="${build.dir}/depend"
	    closure="true"/>
    <javac includeAntRuntime="no" debug="on" deprecation="on"
           srcdir="src/client/j2se" destdir="${build.dir}/classes/client"
           classpathref="client.classpath" source="${javac.source}">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Removes all built files and all ~ files -->
  <target name="clean" description="Removes all built files and all ~ files">
    <delete dir="${build.dir}"/>
    <delete>
      <fileset dir="." defaultexcludes="no" includes="**/*~"/>
    </delete>
  </target>

  <!-- Builds the documentation -->
  <target name="doc" depends="javadoc" description="Builds documentation"/>

  <!-- Build the JavaDoc from the source -->
  <target name="javadoc" depends="javadoc-api,javadoc-internal"
	  description="Builds javadoc"/>

  <target name="javadoc-api" depends="javadoc-api-server,javadoc-api-client"
	  description="Builds public API javadoc"/>

  <!-- Build the internal JavaDoc -->
  <target name="javadoc-internal" depends="build, project-version"
          description="Builds internal (full) javadoc">
    <javadoc destdir="${build.dir}/javadoc/internal"
             packagenames="com.sun.*"
             excludepackagenames="${javadoc.excludepackages}"
             overview="src/server/j2se/overview.html"
             windowtitle="${project.name}" doctitle="${project.name}"
	     author="no" access="package">
      <classpath>
        <pathelement location="${build.dir}/test/classes/server"/>
        <pathelement location="${build.dir}/test/classes/client"/>
        <pathelement location="${build.dir}/test/classes/shared"/>
        <pathelement location="${build.dir}/example/classes"/>
        <path refid="server.classpath"/>
        <path refid="client.classpath"/>
        <pathelement location="lib/junit-4.1.jar"/>
      </classpath>
      <sourcepath>
        <dirset dir="src" includes="*/j2se"/>
        <dirset dir="test" includes="*/j2se"/>
        <dirset dir="example" includes="*/src"/>
      </sourcepath>
      <link href="${jdk.doc.api.url}"
	    offline="true"
	    packagelistLoc="${jdk.package.list}"/>
      <link href="${mina.doc.api.url}"
            offline="true"
            packagelistLoc="${mina.package.list}"/>
      <footer>
        <![CDATA[<font size="-1">Project Darkstar, Version
        ${project.version}<br>${project.build}</font>]]>
      </footer>
      <bottom>
        <![CDATA[<font size="-1">Copyright &copy; 2007 Sun Microsystems,
        Inc. All rights reserved</font>]]>
      </bottom>
    </javadoc>
  </target>

  <!-- Build the public Application API JavaDoc -->
  <target name="javadoc-api-server" depends="build-server, project-version"
	  description="Builds public server application API javadoc">
    <javadoc sourcepath="src/server/j2se:src/shared/j2se"
             destdir="${build.dir}/javadoc/apidoc/sgs-server-apidoc"
             classpathref="server.classpath"
             packagenames="com.sun.sgs.app.*, com.sun.sgs.protocol.simple"
             overview="src/server/j2se/overview.html"
             windowtitle="${project.name} Server API"
             doctitle="${project.name} Server API"
             public="true" author="no">
      <link href="${jdk.doc.api.url}"
	    offline="true"
	    packagelistLoc="${jdk.package.list}"/>
      <link href="${mina.doc.api.url}"
            offline="true"
            packagelistLoc="${mina.package.list}"/>
      <footer>
        <![CDATA[<font size="-1">Project Darkstar, Version
        ${project.version}<br>${project.build}</font>]]>
      </footer>
      <bottom>
        <![CDATA[<font size="-1">Copyright &copy; 2007 Sun Microsystems,
        Inc. All rights reserved</font>]]>
      </bottom>
    </javadoc>
  </target>

  <!-- Build the public Client API JavaDoc -->
  <target name="javadoc-api-client" depends="build-client, project-version"
	  description="Builds public client API javadoc">
    <javadoc destdir="${build.dir}/javadoc/apidoc/sgs-client-apidoc"
             classpathref="client.classpath"
             packagenames="com.sun.sgs.client,com.sun.sgs.client.simple,com.sun.sgs.protocol.simple"
             overview="src/client/j2se/overview.html"
             windowtitle="${project.name} Client API"
             doctitle="${project.name} Client API"
             public="true" author="no">
      <sourcepath>
        <dirset dir="src/client/j2se"/>
        <dirset dir="src/shared/j2se"/>
      </sourcepath>
      <link href="${jdk.doc.api.url}"
	    offline="true"
	    packagelistLoc="${jdk.package.list}"/>
      <link href="${mina.doc.api.url}"
            offline="true"
            packagelistLoc="${mina.package.list}"/>
      <footer>
        <![CDATA[<font size="-1">Project Darkstar, Version
        ${project.version}<br>${project.build}</font>]]>
      </footer>
      <bottom>
        <![CDATA[<font size="-1">Copyright &copy; 2007 Sun Microsystems,
        Inc. All rights reserved</font>]]>
      </bottom>
    </javadoc>
  </target>

  <!-- Builds the API javadoc zip files -->
  <target name="apidoc" depends="zip-apidoc-server,zip-apidoc-client"
	  description="Builds API javadoc zip files"/>

  <!-- Builds the app API javadoc zip file -->
  <target name="zip-apidoc-server" depends="javadoc-api-server"
	  description="Builds app API javadoc zip file">
    <zip destfile="${apidoc.server.zip}"
          basedir="${build.dir}/javadoc/apidoc"
          includes="sgs-server-apidoc/**"/>
  </target>

  <!-- Builds the client API javadoc zip file -->
  <target name="zip-apidoc-client" depends="javadoc-api-client"
	  description="Builds client API javadoc zip file">
    <zip destfile="${apidoc.client.zip}"
          basedir="${build.dir}/javadoc/apidoc"
          includes="sgs-client-apidoc/**"/>
  </target>

  <!-- Creates distribution files -->
  <target name="dist" depends="dist-client, dist-server"
	  description="Creates distribution files"/>

  <!-- Creates client distribution files -->
  <target name="dist-client" depends="dist-client-source, dist-client-binary"
	  description="Creates client distribution files"/>

  <!-- Creates client source distribution -->
  <target name="dist-client-source" depends="project-version"
	  description="Creates client source distribution">
    <delete dir="${build.dir}/sgs-client-src"/>
    <copy todir="${build.dir}/sgs-client-src">
      <fileset dir="."
	       excludes="**/.svn"
	       includes="doc/ClientTutorial.*,
			 example/c-client/**,
			 example/tutorial/src/com/sun/sgs/tutorial/client/**,
			 src/client/**,
			 src/shared/**,
			 test/client/**"/>
    </copy>
    <copy file="etc/CHANGELOG-client"
	  tofile="${build.dir}/sgs-client-src/CHANGELOG"/>
    <copy file="etc/LICENSE-client"
	  tofile="${build.dir}/sgs-client-src/LICENSE"/>
    <copy file="etc/NOTICE.txt" todir="${build.dir}/sgs-client-src"/>
    <copy file="etc/THIRDPARTYLICENSE-non-gpl.txt"
	  tofile="${build.dir}/sgs-client-src/THIRDPARTYLICENSE.txt"/>
    <copy file="etc/README-client-source"
	  tofile="${build.dir}/sgs-client-src/README">
      <filterset refid="versions"/>
    </copy>
    <apply executable="${ruby}" logError="true">
      <arg file="etc/update_copyrights"/>
      <arg file="etc/COPYRIGHT-client"/>
      <fileset dir="${build.dir}/sgs-client-src" includes="**/*.java"/>
    </apply>
    <delete>
      <fileset dir="${build.dir}/sgs-client-src"
	       defaultexcludes="no"
	       includes="**/*~"/>
    </delete>
    <zip destfile="${build.dir}/sgs-client-src-${project.version}.zip">
      <zipfileset dir="${build.dir}/sgs-client-src"
		  prefix="sgs-client-src-${project.version}"/>
    </zip>
  </target>

  <!-- Creates client binary distribution -->
  <target name="dist-client-binary"
	  depends="javadoc-api-client, jar-client, jar-tutorial,
		   project-version"
	  description="Creates client binary files for distribution">
    <delete dir="${build.dir}/sgs-client"/>
    <copy todir="${build.dir}/sgs-client/doc/sgs-client-api">
      <fileset dir="${build.dir}/javadoc/apidoc/sgs-client-apidoc/"/>
    </copy>
    <copy todir="${build.dir}/sgs-client/lib">
      <fileset file="${build.dir}/lib/sgs-client.jar"/>
      <fileset dir="lib"
	       includes="mina-core-1.1.jar,
			 slf4j-api-1.4.0.jar,
			 slf4j-jdk14-1.4.0.jar"/>
    </copy>
    <copy todir="${build.dir}/sgs-client/tutorial">
      <fileset file="${build.dir}/example/tutorial/tutorial-client.jar"/>
      <fileset file="doc/ClientTutorial.pdf"/>
    </copy>
    <copy todir="${build.dir}/sgs-client/tutorial/src">
      <fileset dir="example/tutorial/src"
	       includes="com/sun/sgs/tutorial/client/**/*.java"/>
    </copy>
    <copy file="etc/CHANGELOG-client"
	  tofile="${build.dir}/sgs-client/CHANGELOG"/>
    <copy file="etc/LICENSE-client"
	  tofile="${build.dir}/sgs-client/LICENSE"/>
    <copy file="etc/NOTICE.txt" todir="${build.dir}/sgs-client"/>
    <copy file="etc/THIRDPARTYLICENSE-non-gpl.txt"
	  tofile="${build.dir}/sgs-client/THIRDPARTYLICENSE.txt"/>
    <copy file="etc/README-client-binary"
	  tofile="${build.dir}/sgs-client/README">
      <filterset refid="versions"/>
    </copy>
    <zip destfile="${build.dir}/sgs-client-${project.version}.zip">
      <zipfileset dir="${build.dir}/sgs-client"
		  prefix="sgs-client-${project.version}"/>
    </zip>
  </target>

  <!-- Creates server distribution files -->
  <target name="dist-server" depends="dist-server-source, dist-server-binary"
	  description="Creates server distribution files "/>

  <!-- Creates server source distribution -->
  <target name="dist-server-source" depends="project-version"
	  description="Creates server source distribution">
    <delete dir="${build.dir}/sgs-src"/>
    <copy todir="${build.dir}/sgs-src">
      <fileset dir="."
	       excludes="**/.svn"
	       includes="build.xml,
			 doc/ServerAppTutorial.*,
			 etc/jdk5.0_package_list/**,
			 etc/mina1.1_package_list/**,
			 etc/sgs-config.properties,
			 etc/sgs-logging.properties,
			 etc/sgs.bat,
			 etc/sgs.sh,
			 example/tutorial/*,
			 example/tutorial/src/com/sun/sgs/tutorial/server/**,
			 src/shared/**,
			 src/server/**,
			 test/shared/**,
			 test/server/**"/>
    </copy>
    <copy file="etc/CHANGELOG-server" tofile="${build.dir}/sgs-src/CHANGELOG"/>
    <copy file="etc/LICENSE-server" tofile="${build.dir}/sgs-src/LICENSE"/>
    <copy file="etc/NOTICE.txt" todir="${build.dir}/sgs-src"/>
    <copy file="etc/NOTICE-server-gpl"
	  tofile="${build.dir}/sgs-src/NOTICE-gpl"/>
    <copy file="etc/THIRDPARTYLICENSE-non-gpl.txt"
	  tofile="${build.dir}/sgs-src/THIRDPARTYLICENSE.txt"/>
    <copy file="etc/README-server-source" tofile="${build.dir}/sgs-src/README">
      <filterset refid="versions"/>
    </copy>
    <mkdir dir="${build.dir}/sgs-src/lib"/>
    <zip destfile="${build.dir}/sgs-src-${project.version}.zip">
      <zipfileset dir="${build.dir}/sgs-src"
		  prefix="sgs-src-${project.version}"/>
    </zip>
  </target>

  <!-- Creates server binary distribution -->
  <target name="dist-server-binary"
	  depends="-dist-server-binary-clean, dist-server-binary-tutorial,
		   jar-server, javadoc-api-server, project-version"
	  description="Creates server binary distribution">
    <copy todir="${build.dir}/sgs">
      <fileset dir="etc"
	       includes="sgs.*,
			 sgs-*.properties"/>
    </copy>
    <copy file="etc/CHANGELOG-server" tofile="${build.dir}/sgs/CHANGELOG"/>
    <copy file="etc/LICENSE-server" tofile="${build.dir}/sgs/LICENSE"/>
    <copy file="etc/NOTICE.txt" todir="${build.dir}/sgs"/>
    <copy file="etc/NOTICE-server-gpl" tofile="${build.dir}/sgs/NOTICE-gpl"/>
    <copy file="etc/README-server-binary" tofile="${build.dir}/sgs/README">
      <filterset refid="versions"/>
    </copy>
    <chmod file="${build.dir}/sgs/sgs.sh" perm="a+x"/>
    <copy file="${build.dir}/lib/sgs.jar" todir="${build.dir}/sgs/lib"/>
    <copy file="${bdb.je.jar}" todir="${build.dir}/je"/>
    <copy file="etc/LICENSE-je" tofile="${build.dir}/je/LICENSE"/>
    <copy todir="${build.dir}/sgs/doc/sgs-api">
      <fileset dir="${build.dir}/javadoc/apidoc/sgs-server-apidoc"/>
    </copy>
    <copy todir="${build.dir}/mina">
      <fileset dir="lib" includes="mina-*.jar"/>
    </copy>
    <copy file="etc/LICENSE-mina" tofile="${build.dir}/mina/LICENSE"/>
    <copy file="etc/NOTICE-mina" tofile="${build.dir}/mina/NOTICE"/>
    <copy todir="${build.dir}/slf4j">
      <fileset dir="lib" includes="slf4j-*.jar"/>
    </copy>
    <copy file="etc/LICENSE-slf4j" tofile="${build.dir}/slf4j/LICENSE"/>
    <copy file="etc/README-server-binary-toplevel"
	  tofile="${build.dir}/README">
      <filterset refid="versions"/>
    </copy>
    <zip destfile="${build.dir}/sgs-${project.version}.zip">
      <fileset file="${build.dir}/README"/>
      <zipfileset dir="${build.dir}/sgs" includes="**"
		  excludes="sgs.sh"
		  prefix="sgs-${project.version}"/>
      <zipfileset dir="${build.dir}/sgs"
		  includes="sgs.sh"
		  filemode="755"
		  prefix="sgs-${project.version}"/>
      <zipfileset dir="${build.dir}/je" includes="**"
		  prefix="je-${bdb.je.version}"/>
      <zipfileset dir="${build.dir}/mina" includes="**"
		  prefix="mina-${mina.version}"/>
      <zipfileset dir="${build.dir}/slf4j" includes="**"
		  prefix="slf4j-${slf4j.version}"/>
    </zip>
  </target>

  <!-- Cleans the server binary distribution directory -->
  <target name="-dist-server-binary-clean">
    <delete dir="${build.dir}/sgs"/>
  </target>

  <!-- Builds the jar files for the project classes -->
  <target name="jar" depends="jar-client, jar-server, jar-tutorial"
	  description="Builds JAR files"/>

  <!-- Builds the client JAR file -->
  <target name="jar-client" depends="build-client"
	  description="Builds the client JAR file">
    <mkdir dir="${build.dir}/lib"/>
    <jar destfile="${build.dir}/lib/sgs-client.jar">
      <fileset dir="${build.dir}/classes/client"/>
      <fileset dir="${build.dir}/classes/shared"/>
      <manifest>
        <attribute name="Class-Path"
		   value="mina-core-1.1.jar
			  slf4j-jdk14-1.4.0.jar
			  slf4j-api-1.4.0.jar"/>
      </manifest>
    </jar>
  </target>

  <!-- Builds the server JAR file -->
  <target name="jar-server"
	  depends="build-server, build-bdb-db, project-version"
	  description="Builds server JAR files">
    <mkdir dir="${build.dir}/lib"/>
    <echo file="${build.dir}/classes/server/com/sun/sgs/sgs.version"
	  message="${project.version}"/>
    <jar destfile="${build.dir}/lib/sgs.jar">
      <fileset dir="${build.dir}/classes/server"/>
      <fileset dir="${build.dir}/classes/shared"/>
      <manifest>
        <attribute name="Main-Class" value="com.sun.sgs.impl.kernel.Kernel"/>
        <attribute name="Class-Path"
                   value="${bdb.je.jar.name}
                          mina-core-1.1.jar
                          slf4j-jdk14-1.4.0.jar
			  slf4j-api-1.4.0.jar"/>
      </manifest>
    </jar>
  </target>

  <!-- Sets properties for the project version -->
  <target name="project-version"
	  description="Sets properties for the project version">
    <!-- Use the latest committed revision, the part after the colon -->
    <exec outputproperty="project.revision"
	  executable="svnversion"
	  logError="true">
      <arg line="-c"/>
      <redirector>
	<outputfilterchain>
	  <tokenfilter>
	    <containsregex pattern="[^:]*:?([^:]*)" replace="\1"/>
	  </tokenfilter>
	</outputfilterchain>
      </redirector>
    </exec>
    <condition property="release.suffix" value=".internal" else="">
      <isfalse value="${external.release}"/>
    </condition>
    <property name="project.version"
	      value="${project.release}${release.suffix}-r${project.revision}"/>
    <echo message="${project.version}"/>
    <filterset id="versions">
      <filter token="VERSION" value="${project.version}"/>
      <filter token="BDB.VERSION" value="${bdb.version}"/>
      <filter token="BDBJE.VERSION" value="${bdb.je.version}"/>
      <filter token="MINA.VERSION" value="${mina.version}"/>
      <filter token="SLF4J.VERSION" value="${slf4j.version}"/>
    </filterset>
  </target>

  <!-- Checks Java coding style -->
  <target name="checkstyle"
	  depends="checkstyle-client, checkstyle-server, checkstyle-shared"
	  description="Checks Java coding style">
  </target>

  <!-- Checks client Java coding style -->
  <target name="checkstyle-client"
	  depends="build-client,-checkstyle.init"
	  description="Checks client Java coding style">
    <checkstyle config="etc/checkstyle/darkstar_checks.xml"
	        classpathref="client.classpath">
      <fileset dir="src/client/j2se"/>
    </checkstyle>
  </target>

  <!-- Checks server Java coding style -->
  <target name="checkstyle-server"
	  depends="build-server,-checkstyle.init"
	  description="Checks server Java coding style">
    <checkstyle config="etc/checkstyle/darkstar_checks.xml"
		classpathref="server.classpath">
      <fileset dir="src/server/j2se"/>
    </checkstyle>
  </target>

  <!-- Checks shared Java coding style -->
  <target name="checkstyle-shared"
	  depends="-build-shared,-checkstyle.init"
	  description="Checks shared Java coding style">
    <checkstyle config="etc/checkstyle/darkstar_checks.xml"
		classpathref="shared.classpath">
      <fileset dir="src/shared/j2se"/>
    </checkstyle>
  </target>

  <!-- Verify checkstyle.jar is set, build local checkstyle classes,
       and define the checkstyle task. -->
  <target name="-checkstyle.init">
      <fail unless="checkstyle.jar"
	    message="The checkstyle.jar property must be set to the location of the checkstyle-all JAR file"/>
      <mkdir dir="${build.dir}/classes/checkstyle"/>
      <depend srcdir="etc/checkstyle" destdir="${build.dir}/classes/checkstyle"
	      cache="${build.dir}/depend" closure="true"/>
      <javac srcdir="etc/checkstyle" destdir="${build.dir}/classes/checkstyle"
	     classpath="${checkstyle.jar}" includeAntRuntime="no"
	     debug="${build.debug}" debuglevel="${build.debug.level}"
	     source="${javac.source}">
	<compilerarg line="${javac.compilerargs}"/>
      </javac>
      <taskdef resource="checkstyletask.properties"
	       classpath="${build.dir}/classes/checkstyle:${checkstyle.jar}"/>
  </target>

  <!-- Checks for bugs using FindBugs (http://findbugs.sourceforge.net) -->
  <target name="findbugs"
	  depends="findbugs-client, findbugs-server, findbugs-shared"
	  description="Checks for bugs using FindBugs"/>

  <!-- Checks for bugs in the client -->
  <target name="findbugs-client" depends="build-client, -findbugs.init"
	  description="Checks for bugs in the client">
    <findbugs home="${findbugs.dir}" jvmargs="-Xmx384m" effort="max"
	      reportLevel="low" sort="true" output="emacs">
      <sourcePath path="src/client/j2se"/>
      <class location="${build.dir}/classes/client"/>
      <auxClasspath>
	<path refid="shared.classpath"/>
      </auxClasspath>
    </findbugs>
  </target>

  <!-- Checks for bugs in the server -->
  <target name="findbugs-server" depends="build-server, -findbugs.init"
	  description="Checks for bugs in the server">
    <findbugs home="${findbugs.dir}" jvmargs="-Xmx384m" effort="max"
	      reportLevel="low" sort="true" output="emacs">
      <sourcePath path="src/server/j2se"/>
      <class location="${build.dir}/classes/server"/>
      <auxClasspath>
	<path refid="shared.classpath"/>
	<path refid="bdb.classpath"/>
      </auxClasspath>
    </findbugs>
  </target>

  <!-- Checks for bugs in shared code -->
  <target name="findbugs-shared" depends="-build-shared, -findbugs.init"
	  description="Checks for bugs in shared code">
    <findbugs home="${findbugs.dir}" jvmargs="-Xmx384m" effort="max"
	      reportLevel="low" sort="true" output="emacs">
      <sourcePath path="src/shared/j2se"/>
      <class location="${build.dir}/classes/shared"/>
      <auxClasspath>
	<path refid="shared.classpath"/>
      </auxClasspath>
    </findbugs>
  </target>

  <!-- Defines the findbugs task -->
  <target name="-findbugs.init">
    <fail unless="findbugs.dir"
	  message="The findbugs.dir property must be set to a directory containing the FindBugs installation"/>
    <taskdef name="findbugs"
	     classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
	     classpath="${findbugs.dir}/lib/findbugs-ant.jar"/>
  </target>

  <!-- Compile and run tests -->
  <target name="test" depends="test-shared, test-server, test-client"
	  description="Compiles and runs tests"/>

  <!-- Compile and run shared tests -->
  <target name="test-shared" depends="-test-shared.classes"
	  description="Compiles and runs shared tests">
    <mkdir dir="${build.dir}/test"/>
    <delete dir="${build.dir}/test/output"/>
    <mkdir dir="${build.dir}/test/output"/>
    <!-- XXX: We'd like to use forkmode="once" here, but that doesn't
	 seem to work in Ant 1.6.1 -tjb@sun.com (01/13/2006)
      -->
    <junit fork="true"
	   printsummary="on"
	   showoutput="${test.showoutput}"
	   tempdir="${build.dir}/test/output"
	   failureproperty="tests.failed">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.io.tmpdir" file="${build.dir}/test/output"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/shared"/>
        <path refid="shared.classpath"/>
      </classpath>
      <syspropertyset>
	<propertyref prefix="test."/>
	<propertyref prefix="com.sun.sgs."/>
      </syspropertyset>
      <!-- XXX: This doesn't work in Ant 1.6.1,
	   either. -tjb@sun.com (01/13/2006) -->
      <!-- <assertions>
	     <enable/>
	   </assertions> -->
      <formatter type="${test.formatter.type}"/>
      <batchtest todir="${build.dir}/test/output">
	<fileset dir="test/shared/j2se"
	  includes="${test.include}"/>
      </batchtest>
    </junit>
    <fail if="tests.failed" message="Some tests failed"/>
  </target>

  <!-- Compile and run server tests -->
  <target name="test-server" depends="-test-server.classes"
	  description="Compiles and runs server tests">
    <mkdir dir="${build.dir}/test"/>
    <delete dir="${build.dir}/test/output"/>
    <mkdir dir="${build.dir}/test/output"/>
    <!-- XXX: We'd like to use forkmode="once" here, but that doesn't
	 seem to work in Ant 1.6.1 -tjb@sun.com (01/13/2006)
      -->
    <junit fork="true"
	   printsummary="on"
	   showoutput="${test.showoutput}"
	   tempdir="${build.dir}/test/output"
	   failureproperty="tests.failed">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.library.path" file="${bdb.lib.dir}"/>
      <sysproperty
	 key="com.sun.sgs.impl.service.data.store.db.environment.class"
	 value="${test.bdb.env}"/>
      <sysproperty key="java.io.tmpdir" file="${build.dir}/test/output"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/server"/>
        <path refid="server.classpath"/>
      </classpath>
      <syspropertyset>
	<propertyref prefix="test."/>
	<propertyref prefix="com.sun.sgs."/>
	<propertyref prefix="je."/>
      </syspropertyset>
      <!-- XXX: This doesn't work in Ant 1.6.1,
	   either. -tjb@sun.com (01/13/2006) -->
      <!-- <assertions>
	     <enable/>
	   </assertions> -->
      <formatter type="${test.formatter.type}"/>
      <batchtest todir="${build.dir}/test/output">
	<fileset dir="test/server/j2se"
	  includes="${test.include}"/>
      </batchtest>
    </junit>
    <fail if="tests.failed" message="Some tests failed"/>
  </target>

  <!-- Compiles and runs client tests -->
  <target name="test-client" depends="-test-client.classes"
	  description="Compiles and runs client tests">
    <mkdir dir="${build.dir}/test"/>
    <delete dir="${build.dir}/test/output"/>
    <mkdir dir="${build.dir}/test/output"/>
    <!-- XXX: We'd like to use forkmode="once" here, but that doesn't
	 seem to work in Ant 1.6.1 -tjb@sun.com (01/13/2006)
      -->
    <junit fork="true"
	   printsummary="on"
	   showoutput="${test.showoutput}"
	   tempdir="${build.dir}/test/output"
	   failureproperty="tests.failed">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.io.tmpdir" file="${build.dir}/test/output"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/client"/>
        <path refid="client.classpath"/>
      </classpath>
      <syspropertyset>
	<propertyref prefix="test."/>
	<propertyref prefix="com.sun.sgs."/>
      </syspropertyset>
      <!-- XXX: This doesn't work in Ant 1.6.1,
	   either. -tjb@sun.com (01/13/2006) -->
      <!-- <assertions>
	     <enable/>
	   </assertions> -->
      <formatter type="${test.formatter.type}"/>
      <batchtest todir="${build.dir}/test/output">
	<fileset dir="test/client/j2se"
	  includes="${test.include}"/>
      </batchtest>
    </junit>
    <fail if="tests.failed" message="Some tests failed"/>
  </target>

  <!-- Compiles tests -->
  <target name="-test-shared.classes" depends="-build-shared">
    <mkdir dir="${build.dir}/test/classes/shared"/>
    <depend srcdir="test/shared/j2se"
	    destdir="${build.dir}/test/classes/shared"
	    cache="${build.dir}/test/depend"
	    closure="true"/>
    <javac srcdir="test/shared/j2se"
	   destdir="${build.dir}/test/classes/shared"
	   includeAntRuntime="yes"
	   debug="on"
	   source="${javac.source}"
	   classpathref="shared.classpath"
	   includes="**/*.java">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <target name="-test-server.classes"
	  depends="build-server, -test-maybe-build-bdb-db">
    <mkdir dir="${build.dir}/test/classes/server"/>
    <depend srcdir="test/server/j2se"
	    destdir="${build.dir}/test/classes/server"
	    cache="${build.dir}/test/depend"
	    closure="true"/>
    <javac srcdir="test/server/j2se"
	   destdir="${build.dir}/test/classes/server"
	   includeAntRuntime="yes"
	   debug="on"
	   source="${javac.source}"
	   classpathref="server.classpath"
	   includes="**/*.java">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <target name="-test-maybe-build-bdb-db" unless="test.use.je.if.set">
    <antcall target="build-bdb-db"/>
  </target>

  <target name="-test-client.classes" depends="build-client">
    <mkdir dir="${build.dir}/test/classes/client"/>
    <depend srcdir="test/client/j2se"
	    destdir="${build.dir}/test/classes/client"
	    cache="${build.dir}/test/depend"
	    closure="true"/>
    <javac srcdir="test/client/j2se"
	   destdir="${build.dir}/test/classes/client"
	   includeAntRuntime="yes"
	   debug="on"
	   source="${javac.source}"
	   classpathref="client.classpath"
	   includes="**/*.java">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Run IO test server -->
  <target name="io-test-server" depends="-test-shared.classes"
          description="Runs the IO test server">
    <java classname="com.sun.sgs.test.impl.io.ServerTest"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/shared"/>
        <path refid="shared.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- Run IO test client -->
  <target name="io-test-client" depends="-test-shared.classes"
          description="Runs the IO test client">
    <java classname="com.sun.sgs.test.impl.io.ClientTest"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/shared"/>
        <path refid="shared.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- Run Async IO test server -->
  <target name="aio-test-server" depends="-test-shared.classes"
          description="Runs the Async IO test server">
    <java classname="com.sun.sgs.test.impl.nio.EchoServer" fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="java.net.preferIPv4Stack" value="true"/>
      <sysproperty key="com.sun.sgs.nio.channels.spi.AsynchronousChannelProvider"
                   value="com.sun.sgs.impl.nio.ReactiveAsyncChannelProvider"/>
      <sysproperty key="com.sun.sgs.nio.async.reactive.reactors" value="1"/>
      <sysproperty key="java.util.logging.config.file" file="${test.logging}"/>
      <sysproperty key="host" value="localhost"/>
      <sysproperty key="port" value="38502"/>
      <sysproperty key="buffer_size" value="32"/>
      <sysproperty key="threads" value="4"/>
      <sysproperty key="maxthreads" value="4"/>
      <sysproperty key="tcp_nodelay" value="true"/>
      <sysproperty key="backlog" value="5"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/shared"/>
        <pathelement location="${build.dir}/classes/shared"/>
      </classpath>
    </java>
  </target>

  <!-- Run Async IO test client -->
  <target name="aio-test-client" depends="-test-shared.classes"
          description="Runs the Async IO test client">
    <java classname="com.sun.sgs.test.impl.nio.EchoClient" fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <sysproperty key="java.net.preferIPv4Stack" value="true"/>
      <sysproperty key="com.sun.sgs.nio.channels.spi.AsynchronousChannelProvider"
                   value="com.sun.sgs.impl.nio.ReactiveAsyncChannelProvider"/>
      <sysproperty key="com.sun.sgs.nio.async.reactive.reactors" value="1"/>
      <sysproperty key="java.util.logging.config.file" file="${test.logging}"/>
      <sysproperty key="host" value="localhost"/>
      <sysproperty key="port" value="38502"/>
      <sysproperty key="buffer_size" value="32"/>
      <sysproperty key="threads" value="4"/>
      <sysproperty key="maxthreads" value="4"/>
      <sysproperty key="tcp_nodelay" value="true"/>
      <sysproperty key="clients" value="200"/>
      <sysproperty key="messages" value="1000"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/shared"/>
        <pathelement location="${build.dir}/classes/shared"/>
      </classpath>
    </java>
  </target>

  <!-- Run Client API test server -->
  <target name="clientapi-test-server" depends="-test-client.classes"
          description="Runs the Client API test server">
    <java classname="com.sun.sgs.test.client.simple.SimpleServer"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/client"/>
        <path refid="client.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- Run Client API test client -->
  <target name="clientapi-test-client" depends="-test-client.classes"
          description="Runs the Client API test client">
    <java classname="com.sun.sgs.test.client.simple.ClientTest"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/client"/>
        <path refid="client.classpath"/>
      </classpath>
    </java>
  </target>
  
  <!-- Run Client API test client GUI -->
  <target name="clientapi-test-client-gui" depends="-test-client.classes"
          description="Runs the Client API test client GUI">
    <java classname="com.sun.sgs.test.client.simple.SimpleClientTestUI"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/test/classes/client"/>
        <path refid="client.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- Builds the example code -->
  <target name="example-classes" depends="build, -test-maybe-build-bdb-db"
          description="Builds the example code">
    <mkdir dir="${build.dir}/example/classes"/>
    <depend srcdir="example"
            destdir="${build.dir}/example/classes"
	    cache="${build.dir}/example/depend"
	    closure="true"/>
    <javac destdir="${build.dir}/example/classes"
	   debug="on"
	   source="${javac.source}">
      <src>
        <dirset dir="example" includes="*/src"/>
      </src>
      <classpath>
        <pathelement location="${build.dir}/classes/server"/>
        <pathelement location="${build.dir}/classes/client"/>
        <pathelement location="${build.dir}/classes/shared"/>
      </classpath>
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Builds the analysis code -->
  <target name="analysis-classes"
	  depends="build-server, -test-maybe-build-bdb-db"
          description="Builds the analysis code">
    <mkdir dir="${build.dir}/analysis/classes"/>
    <depend srcdir="analysis"
            destdir="${build.dir}/analysis/classes"
	    cache="${build.dir}/depend"
	    closure="true"/>
    <javac srcdir="analysis/server/j2se"
	   destdir="${build.dir}/analysis/classes"
	   includeAntRuntime="no"
	   debug="on"
	   source="${javac.source}"
	   classpathref="server.classpath"
	   includes="**/*.java">
      <compilerarg value="${javac.compilerargs}"/>
    </javac>
  </target>

  <!-- Runs the example ChatApp (server) -->
  <target name="example-chat-app" depends="example-classes"
          description="Runs the example ChatApp (server)">
    <mkdir dir="/tmp/ChatApp/dsdb"/>
    <java classname="com.sun.sgs.impl.kernel.Kernel"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.library.path" file="${bdb.lib.dir}"/>
      <sysproperty
	 key="com.sun.sgs.impl.service.data.store.db.environment.class"
	 value="${test.bdb.env}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/example/classes"/>
        <path refid="server.classpath"/>
      </classpath>
      <arg value="example/chat/ChatApp.properties"/>
    </java>
  </target>

  <!-- Runs the example ChatClient -->
  <target name="example-chat-client" depends="example-classes"
          description="Runs the example ChatClient">
    <java classname="com.sun.sgs.example.chat.client.ChatClient"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/example/classes"/>
        <path refid="client.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- Runs the task timing analysis -->
  <target name="analysis" depends="analysis-classes"
          description="Runs the task timing analysis">
    <mkdir dir="${build.dir}/analysis"/>
    <delete dir="${build.dir}/analysis/logs"/>
    <delete dir="${build.dir}/analysis/data"/>
    <delete dir="${build.dir}/analysis/dsdb"/>
    <mkdir dir="${build.dir}/analysis/logs"/>
    <mkdir dir="${build.dir}/analysis/data"/>
    <mkdir dir="${build.dir}/analysis/dsdb"/>
    <java classname="com.sun.sgs.impl.kernel.Kernel"
	  fork="true">
      <jvmarg line="${analysis.jvm.args}"/>
      <sysproperty key="com.sun.sgs.config.file"
		   file="analysis/System.properties"/>
      <sysproperty key="java.library.path" 
		   file="${bdb.lib.dir}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <sysproperty key="com.sun.sgs.app.root"
		   file="${build.dir}/analysis"/>
      <sysproperty
	 key="com.sun.sgs.impl.service.data.store.db.environment.class"
	 value="${test.bdb.env}"/>
      <sysproperty
	 key="com.sun.sgs.impl.service.data.DataServiceImpl.data.store.class"
	 value="${analysis.data.store.class}"/>
      <sysproperty key="com.sun.sgs.impl.service.data.store.net.server.run"
		   value="${analysis.data.store.server.run}"/>
      <sysproperty key="com.sun.sgs.impl.service.data.store.net.server.host"
		   value="${analysis.data.store.server.host}"/>
      <sysproperty key="com.sun.sgs.impl.service.data.store.net.server.port"
		   value="${analysis.data.store.server.port}"/>
      <sysproperty key="com.sun.sgs.analysis.tasks"
		   value="${analysis.tasks}"/>
      <syspropertyset>
	<propertyref prefix="test."/>
	<propertyref prefix="com.sun.sgs."/>
	<propertyref prefix="je."/>
      </syspropertyset>
      <classpath>
        <pathelement location="${build.dir}/analysis/classes"/>
        <path refid="server.classpath"/>
      </classpath>
      <arg value="analysis/AnalysisApplication.properties"/>
    </java>
  </target>

  <!-- Runs the example HackApp (server) -->
  <target name="example-hack-app" depends="example-classes"
          description="Runs the example HackApp (server)">
    <mkdir dir="${build.dir}/example"/>
    <delete dir="${build.dir}/example/HackApp"/>
    <mkdir dir="${build.dir}/example/HackApp/dsdb"/>
    <copy todir="${build.dir}/example/HackApp/gameData">
      <fileset dir="example/hack/gameData"/>
    </copy>
    <java classname="com.sun.sgs.impl.kernel.Kernel"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <jvmarg line="-server"/>
      <!--<sysproperty key="com.sun.management.jmxremote" value=""/>-->
      <sysproperty key="com.sun.sgs.app.root"
		   file="${build.dir}/example/HackApp"/>
      <sysproperty key="com.sun.sgs.config.file"
		   file="example/hack/System.properties"/>
      <sysproperty key="java.library.path" file="${bdb.lib.dir}"/>
      <sysproperty
	 key="com.sun.sgs.impl.service.data.store.db.environment.class"
	 value="${test.bdb.env}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/example/classes"/>
        <path refid="server.classpath"/>
      </classpath>
      <arg value="example/hack/HackApp.properties"/>
    </java>
  </target>

  <!-- Runs the example HackClient (GUI client) -->
  <target name="example-hack-client" depends="example-classes"
          description="Runs the example HackClient">
    <java classname="com.sun.sgs.example.hack.client.Client"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="host" value="localhost"/>
      <sysproperty key="port" value="4458"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/example/classes"/>
        <path refid="client.classpath"/>
      </classpath>
    </java>
  </target>

  <!-- Runs the Hack example AIClient -->
  <target name="example-hack-ai-client" depends="example-classes"
          description="Runs the example HackClient (AI client)">
    <property name="hack.server.host" value="localhost"/>
    <property name="hack.client.count" value="10"/>
    <java classname="com.sun.sgs.example.hack.client.ai.AIClient"
          fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="host" value="${hack.server.host}"/>
      <sysproperty key="port" value="4458"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.logging}"/>
      <classpath>
        <pathelement location="${build.dir}/example/classes"/>
        <path refid="client.classpath"/>
      </classpath>
      <arg value="${hack.client.count}"/>
    </java>
  </target>

  <!-- Builds tutorial jar files -->
  <target name="jar-tutorial" depends="example-classes"
          description="Builds tutorial jar file">
    <mkdir dir="${build.dir}/example/tutorial"/>
    <jar destfile="${build.dir}/example/tutorial/tutorial.jar">
      <fileset dir="${build.dir}/example/classes"
               includes="com/sun/sgs/tutorial/server/**"/>
    </jar>
    <jar destfile="${build.dir}/example/tutorial/tutorial-client.jar">
      <fileset dir="${build.dir}/example/classes"
               includes="com/sun/sgs/tutorial/client/**"/>
    </jar>
  </target>

  <!-- Builds tutorial files for the binary server distribution -->
  <target name="dist-server-binary-tutorial" depends="jar-tutorial"
          description=
	    "Builds tutorial files for the binary server distribution">
    <copy todir="${build.dir}/sgs/tutorial">
      <fileset dir="example/tutorial" includes="*.properties"/>
      <fileset file="${build.dir}/example/tutorial/tutorial.jar"/>
      <fileset file="doc/ServerAppTutorial.pdf"/>
    </copy>
    <copy todir="${build.dir}/sgs/tutorial/src">
      <fileset dir="example/tutorial/src"
	       includes="com/sun/sgs/tutorial/server/**/*.java"/>
    </copy>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloChannels/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloEcho/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloLogger/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloPersistence/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloPersistence2/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloPersistence3/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloTimer/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloUser/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloUser2/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/HelloWorld/dsdb"/>
    <mkdir dir="${build.dir}/sgs/tutorial/data/SwordWorld/dsdb"/>
    <!-- TODO: generate and package javadoc -->
  </target>

  <!-- Runs the data store network server -->
  <target name="test-data-store-network-server"
	  depends="build-server, -test-maybe-build-bdb-db"
	  description="Runs the data store network server">
    <property name="test.server.dir"
	      location="${build.dir}/test/data-store-network-server"/>
    <property name="test.server.level" value="INFO"/>
    <delete dir="${test.server.dir}"/>
    <mkdir dir="${test.server.dir}"/>
    <mkdir dir="${test.server.dir}/dsdb"/>
    <echo file="${test.server.dir}/app.config">
      com.sun.sgs.app.name = DataStoreServerImpl
      com.sun.sgs.app.root = ${build.dir}/test/data-store-network-server
      com.sun.sgs.app.port = 0
      com.sun.sgs.app.listener = NONE
      com.sun.sgs.app.finalService = DataService
      com.sun.sgs.impl.service.data.store.net.server.host = localhost
      com.sun.sgs.impl.service.data.store.net.server.run = true
      com.sun.sgs.impl.service.data.DataServiceImpl.data.store.class = \
        com.sun.sgs.impl.service.data.store.net.DataStoreClient
      com.sun.sgs.impl.service.data.store.db.environment.class = \
        ${test.bdb.env}
    </echo>
    <echo file="${test.server.dir}/logging.config">
      .level = ${test.server.level}
      sun.rmi.level = WARNING
      handlers = java.util.logging.ConsoleHandler
      java.util.logging.ConsoleHandler.formatter = \
        java.util.logging.SimpleFormatter
      java.util.logging.ConsoleHandler.level = ${test.server.level}
    </echo>
    <java classname="com.sun.sgs.impl.kernel.Kernel"
	  classpathref="server.classpath"
	  fork="true">
      <jvmarg line="${test.jvm.args}"/>
      <sysproperty key="java.library.path" file="${bdb.lib.dir}"/>
      <sysproperty
	 key="com.sun.sgs.impl.service.data.store.db.environment.class"
	 value="${test.bdb.env}"/>
      <sysproperty key="java.util.logging.config.file"
		   file="${test.server.dir}/logging.config"/>
      <!-- Set the java.rmi.server.hostname property to use a
	   non-standard network interface on the server -->
      <arg file="${test.server.dir}/app.config"/>
      <syspropertyset>
	<propertyref prefix="test."/>
	<propertyref prefix="com.sun.sgs."/>
	<propertyref prefix="java.rmi."/>
      </syspropertyset>
    </java>
  </target>

</project>
